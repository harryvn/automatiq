"use strict";(self.webpackChunkautomatiq_docs=self.webpackChunkautomatiq_docs||[]).push([[5227],{28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(96540);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}},89059:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"selenium-webdriver/basics/screenshots/takesscreenshot-examples","title":"Examples","description":"Screenshot as File","source":"@site/docs/selenium-webdriver/basics/screenshots/02-examples.md","sourceDirName":"selenium-webdriver/basics/screenshots","slug":"/takesscreenshot-examples","permalink":"/automatiq/docs/takesscreenshot-examples","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"Hari Nair","lastUpdatedAt":1756995262000,"sidebarPosition":2,"frontMatter":{"id":"takesscreenshot-examples","title":"Examples","pagination_label":"TakesScreenshot Examples","slug":"/takesscreenshot-examples","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"TakesScreenshot","permalink":"/automatiq/docs/takesscreenshot-methods"},"next":{"title":"Options","permalink":"/automatiq/docs/options-methods"}}');var r=s(74848),i=s(28453);const o={id:"takesscreenshot-examples",title:"Examples",pagination_label:"TakesScreenshot Examples",slug:"/takesscreenshot-examples",sidebar_position:2},a=void 0,l={},c=[{value:"Screenshot as File",id:"screenshot-as-file",level:2},{value:"Screenshot as Base64",id:"screenshot-as-base64",level:2},{value:"Screenshot as Bytes",id:"screenshot-as-bytes",level:2},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={admonition:"admonition",code:"code",em:"em",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"screenshot-as-file",children:"Screenshot as File"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import org.openqa.selenium.OutputType;\nimport org.openqa.selenium.TakesScreenshot;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport java.io.File;\nimport java.io.IOException;\n\npublic class TakesScreenshotAsFileExample {\n    public static void main(String[] args) throws IOException {\n        // Initialize WebDriver\n        WebDriver driver = new ChromeDriver();\n\n        try {\n            driver.get("https://the-internet.herokuapp.com/login");\n\n            // Enter username and password\n            WebElement username = driver.findElement(By.id("username"));\n            WebElement password = driver.findElement(By.id("password"));\n            username.sendKeys("tomsmith");\n            password.sendKeys("SuperSecretPassword!");\n\n            // Click the login button\n            WebElement button = driver.findElement(By.className("radius"));\n            button.click();\n\n            // Wait for login result\n            Thread.sleep(2000);\n\n            // highlight-start\n            // Take screenshot after login\n            File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);\n            FileUtils.copyFile(screenshot, new File("login_screenshot.png"));\n            // highlight-end\n\n            System.out.println("Screenshot saved as login_screenshot.png");\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            driver.quit();\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"screenshot-as-base64",children:"Screenshot as Base64"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import org.openqa.selenium.OutputType;\nimport org.openqa.selenium.TakesScreenshot;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport java.io.IOException;\n\npublic class TakesScreenshotAsBase64Example {\n    public static void main(String[] args) throws IOException {\n        // Initialize WebDriver\n        WebDriver driver = new ChromeDriver();\n\n        try {\n            driver.get("https://the-internet.herokuapp.com/login");\n\n            // Enter username and password\n            WebElement username = driver.findElement(By.id("username"));\n            WebElement password = driver.findElement(By.id("password"));\n            username.sendKeys("tomsmith");\n            password.sendKeys("SuperSecretPassword!");\n\n            // Click the login button\n            WebElement button = driver.findElement(By.className("radius"));\n            button.click();\n\n            // Wait for login result\n            Thread.sleep(2000);\n\n            // highlight-start\n            // Capture screenshot as Base64 string\n            String base64Screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.BASE64);\n            // highlight-end\n\n            // Print Base64 string (can be embedded in reports/logs)\n            System.out.println("Base64 Screenshot: " + base64Screenshot);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            driver.quit();\n        }\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"A similar output will be logged to the console."}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Base64 Screenshot: iVBORw0KGgoAAAANSUhEUgAACWAAAAVCCAIAAAAO61VwAAABLGlDQ1BfAAB4nJWQPUsDQRCGH0NA1DSiooXFlWnUJGI+UAsTNWiZKES7y+UIYhKPy4n2af0R1naCjQipbawEKxEbe0Gwje/dFReQFJlhdp59d9jdGYgtIYunoN3x3Eq5aNROTo3JTybkgZlW12G0qer3Lax9XWF8m2rYXUv5W+G5elxXNsTzzZCvfa6HfOPzled44luf3aNKSfwgTjaHuD7EluP69e/irXbr0or+TcLuHFeVa4plylzIm7SwWaPKOWeYohR7FMizrrwj31CkyUgpkNUuRYkiOa059qXkdZZmN2BV+PMMn+x9wHZ/MBg8RdphH+6zMP0YaclNmE3A80ukRTN2TNcMpLgiZhfhZ0Gt3MHcF8z0pC76xyN6Nf71anBAB4tVUUbdpMn+AQyUTdocuQPoAAAQAElEQVR4nOzdB5wk91kn/MrVuXt6ctidnd3ZnIMkS5YcZBsnbBOMDQZ8hw+4IxwcybxgDALOZ9LBccQDDgNHMrYxtsHgICRbVrBX2px3difn6VxdObxPVfX09KTV7mpG2tn9fTXqra6u8K/qmZE+/dvn/wie5zEAAAAAAAAAAAAAAAB3tnqi4QXqC8R13fryeH70hWvPnR87dXX2suka7U3doiBVtFKhkpvLT6ua..."})})})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"screenshot-as-bytes",children:"Screenshot as Bytes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import org.openqa.selenium.OutputType;\nimport org.openqa.selenium.TakesScreenshot;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport java.io.IOException;\n\npublic class TakesScreenshotAsBytesExample {\n    public static void main(String[] args) throws IOException {\n        // Initialize WebDriver\n        WebDriver driver = new ChromeDriver();\n\n        try {\n            driver.get("https://the-internet.herokuapp.com/login");\n\n            // Enter username and password\n            WebElement username = driver.findElement(By.id("username"));\n            WebElement password = driver.findElement(By.id("password"));\n            username.sendKeys("tomsmith");\n            password.sendKeys("SuperSecretPassword!");\n\n            // Click the login button\n            WebElement button = driver.findElement(By.className("radius"));\n            button.click();\n\n            // Wait for login result\n            Thread.sleep(2000);\n\n            // highlight-start\n            // Capture screenshot as byte array\n            byte[] screenshotBytes = ((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES);\n\n            // Save byte array to a PNG file\n            try (FileOutputStream fos = new FileOutputStream("login_screenshot_bytes.png")) {\n                fos.write(screenshotBytes);\n            }\n            // highlight-end\n\n            System.out.println("Screenshot saved as login_screenshot_bytes.png");\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            driver.quit();\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Most Commonly Used"})," \u2192 ",(0,r.jsx)(n.code,{children:"OutputType.FILE"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Widely used for saving screenshots as files during test failures and debugging."}),"\n",(0,r.jsx)(n.li,{children:"Works well with reporting tools that support file attachments."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Also Popular"})," \u2192 ",(0,r.jsx)(n.code,{children:"OutputType.BASE64"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Preferred in modern reporting (e.g., Allure, ExtentReports) where screenshots are embedded directly into HTML/PDF reports."}),"\n",(0,r.jsx)(n.li,{children:"Eliminates file path management issues in distributed test environments."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Least Used (and should generally be avoided)"})," \u2192 ",(0,r.jsx)(n.code,{children:"OutputType.BYTES"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Rarely needed unless you have a specific requirement to process raw image bytes."}),"\n",(0,r.jsxs)(n.li,{children:["Typically replaced by ",(0,r.jsx)(n.code,{children:"FILE"})," (for saving) or ",(0,r.jsx)(n.code,{children:"BASE64"})," (for embedding)."]}),"\n"]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);