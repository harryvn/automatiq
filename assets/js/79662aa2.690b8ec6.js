"use strict";(self.webpackChunkautomatiq_docs=self.webpackChunkautomatiq_docs||[]).push([[3629],{6896:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/preview-a902c6faaee4de041af777c47757268f.png"},11470:(e,n,i)=>{i.d(n,{A:()=>y});var s=i(96540),t=i(34164),r=i(23104),o=i(56347),a=i(205),c=i(57485),l=i(31682),d=i(70679);function u(e){return s.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:n,children:i}=e;return(0,s.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:i,default:s}})=>({value:e,label:n,attributes:i,default:s}))}(i);return function(e){const n=(0,l.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,i])}function m({value:e,tabValues:n}){return n.some(n=>n.value===e)}function p({queryString:e=!1,groupId:n}){const i=(0,o.W6)(),t=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,c.aZ)(t),(0,s.useCallback)(e=>{if(!t)return;const n=new URLSearchParams(i.location.search);n.set(t,e),i.replace({...i.location,search:n.toString()})},[t,i])]}function f(e){const{defaultValue:n,queryString:i=!1,groupId:t}=e,r=h(e),[o,c]=(0,s.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const i=n.find(e=>e.default)??n[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:r})),[l,u]=p({queryString:i,groupId:t}),[f,x]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[i,t]=(0,d.Dv)(n);return[i,(0,s.useCallback)(e=>{n&&t.set(e)},[n,t])]}({groupId:t}),g=(()=>{const e=l??f;return m({value:e,tabValues:r})?e:null})();(0,a.A)(()=>{g&&c(g)},[g]);return{selectedValue:o,selectValue:(0,s.useCallback)(e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);c(e),u(e),x(e)},[u,x,r]),tabValues:r}}var x=i(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=i(74848);function v({className:e,block:n,selectedValue:i,selectValue:s,tabValues:o}){const a=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.a_)(),l=e=>{const n=e.currentTarget,t=a.indexOf(n),r=o[t].value;r!==i&&(c(n),s(r))},d=e=>{let n=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{const i=a.indexOf(e.currentTarget)+1;n=a[i]??a[0];break}case"ArrowLeft":{const i=a.indexOf(e.currentTarget)-1;n=a[i]??a[a.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":n},e),children:o.map(({value:e,label:n,attributes:s})=>(0,b.jsx)("li",{role:"tab",tabIndex:i===e?0:-1,"aria-selected":i===e,ref:e=>{a.push(e)},onKeyDown:d,onClick:l,...s,className:(0,t.A)("tabs__item",g.tabItem,s?.className,{"tabs__item--active":i===e}),children:n??e},e))})}function j({lazy:e,children:n,selectedValue:i}){const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=r.find(e=>e.props.value===i);return e?(0,s.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:r.map((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==i}))})}function w(e){const n=f(e);return(0,b.jsxs)("div",{className:(0,t.A)("tabs-container",g.tabList),children:[(0,b.jsx)(v,{...n,...e}),(0,b.jsx)(j,{...n,...e})]})}function y(e){const n=(0,x.A)();return(0,b.jsx)(w,{...e,children:u(e.children)},String(n))}},12480:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/docker-compose-0bd6cc71f3d0625cb05f0142b40d366e.avif"},14147:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var s=i(89374),t=i(74848),r=i(28453);i(11470),i(19365);const o={slug:"docker",title:"Part 3 - Docker Implementation",authors:["harryvn"],tags:["selenium","javascript","pm2","docker"],date:new Date("2022-12-15T00:00:00.000Z")},a=void 0,c={authorsImageUrls:[void 0]},l=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisite",id:"prerequisite",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Step 1 - Setup Selenium Grid",id:"step-1---setup-selenium-grid",level:3},{value:"Step 2 - Execute <code>yaml</code> file",id:"step-2---execute-yaml-file",level:3},{value:"Step 3 - Execute Automation Script",id:"step-3---execute-automation-script",level:3},{value:"Live Preview",id:"live-preview",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Docker Implementation"}),"\n","\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(n.p,{children:["In the previous ",(0,t.jsx)(n.a,{href:"/blog/pm2",children:"article"}),", we explored running the Selenium-standalone server as a detached process using ",(0,t.jsx)(n.code,{children:"PM2"}),", a CLI-based manager for daemonizing application processes. Additionally, we created a configuration file to oversee various commands for starting, stopping, and disposing of ",(0,t.jsx)(n.code,{children:"PM2"})," processes."]}),"\n",(0,t.jsx)(n.p,{children:"In this article let's dive deeper into exploring the potential of running automation scripts on Docker containers, including a live preview."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"prerequisite",children:"Prerequisite"}),"\n",(0,t.jsxs)(n.p,{children:["Before diving into Docker, let's ensure we have it set up properly. Installing Docker on your system is a prerequisite for leveraging its capabilities. Follow the official documentation ",(0,t.jsx)(n.a,{href:"https://docs.docker.com/engine/install/",children:"here"})," to install Docker according to your operating system."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,t.jsxs)(n.p,{children:["Several approaches exist for configuring the necessary Docker images to execute automated scripts. Nonetheless, in this instance, we will employ Docker's convenient compose file provided by the ",(0,t.jsx)(n.a,{href:"https://github.com/SeleniumHQ/docker-selenium/blob/trunk/docker-compose-v3.yml",children:"community"}),". The primary aim is to demonstrate Docker's versatility without delving into exhaustive details beyond the scope of this discussion."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"step-1---setup-selenium-grid",children:"Step 1 - Setup Selenium Grid"}),"\n",(0,t.jsxs)(n.p,{children:["Let's create a file ",(0,t.jsx)(n.code,{children:"selenium-grid.yml"})," to define and run a Selenium Grid setup with different browser nodes (Chrome, Edge, Firefox) and a Selenium Hub."]}),"\n",(0,t.jsx)(n.p,{children:"The key components are as below:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"version"}),": Specifies the version of the Docker Compose file syntax being used. In this case, it's version 3."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"services"}),": Defines the services (containers) that compose the application."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"chrome"}),", ",(0,t.jsx)(n.code,{children:"edge"}),", ",(0,t.jsx)(n.code,{children:"firefox"}),": These are services defining browser nodes for Chrome, Edge, and Firefox respectively. Each service is based on a specific Selenium Docker image (",(0,t.jsx)(n.code,{children:"selenium/node-chrome"}),", ",(0,t.jsx)(n.code,{children:"selenium/node-edge"}),", ",(0,t.jsx)(n.code,{children:"selenium/node-firefox"}),") with a particular version (",(0,t.jsx)(n.code,{children:"4.18.1-20240224"}),")."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"selenium-hub"}),": This service defines the Selenium Hub, which manages the distribution of tests across different browser nodes. It uses the ",(0,t.jsx)(n.code,{children:"selenium/hub"})," Docker image with the same version as the browser nodes."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"image"}),": Specifies the Docker image used for each service. Each browser service uses a specific Selenium node image tailored for the respective browser (Chrome, Edge, Firefox), while the Selenium Hub service uses the Selenium Hub image."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"shm_size"}),": Defines the size of the /dev/shm shared memory space for each container. In this case, it's set to 2 gigabytes (",(0,t.jsx)(n.code,{children:"2gb"}),"). This can be important for running browsers in containers to avoid certain issues."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"depends_on"}),": Specifies that each browser node service depends on the Selenium Hub service. This ensures that the Selenium Hub service starts before the browser node services."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"environment"}),": Sets environment variables for each service."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"SE_EVENT_BUS_HOST"}),": Specifies the hostname of the event bus. All services use ",(0,t.jsx)(n.code,{children:"selenium-hub"})," as the event bus host, indicating they communicate with the Selenium Hub."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"SE_EVENT_BUS_PUBLISH_PORT"}),", ",(0,t.jsx)(n.code,{children:"SE_EVENT_BUS_SUBSCRIBE_PORT"}),": Defines the ports for publishing and subscribing to events on the event bus. These are set to ",(0,t.jsx)(n.code,{children:"4442"})," and ",(0,t.jsx)(n.code,{children:"4443"})," respectively, matching the ports exposed by the Selenium Hub service."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"ports"}),": Specifies the ports to expose from the Selenium Hub container to the host machine. In this case, it exposes ports ",(0,t.jsx)(n.code,{children:"4442"}),", ",(0,t.jsx)(n.code,{children:"4443"}),", and ",(0,t.jsx)(n.code,{children:"4444"})," from the container, allowing external connections to the Selenium Hub."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Overall, this configuration sets up a Selenium Grid with multiple browser nodes (Chrome, Edge, Firefox) connected to a central Selenium Hub, allowing for distributed testing across different browsers."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'version: "3"\nservices:\n  chrome:\n    image: selenium/node-chrome:4.18.1-20240224\n    shm_size: 2gb\n    depends_on:\n      - selenium-hub\n    environment:\n      - SE_EVENT_BUS_HOST=selenium-hub\n      - SE_EVENT_BUS_PUBLISH_PORT=4442\n      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443\n\n  edge:\n    image: selenium/node-edge:4.18.1-20240224\n    shm_size: 2gb\n    depends_on:\n      - selenium-hub\n    environment:\n      - SE_EVENT_BUS_HOST=selenium-hub\n      - SE_EVENT_BUS_PUBLISH_PORT=4442\n      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443\n\n  firefox:\n    image: selenium/node-firefox:4.18.1-20240224\n    shm_size: 2gb\n    depends_on:\n      - selenium-hub\n    environment:\n      - SE_EVENT_BUS_HOST=selenium-hub\n      - SE_EVENT_BUS_PUBLISH_PORT=4442\n      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443\n\n  selenium-hub:\n    image: selenium/hub:4.18.1-20240224\n    container_name: selenium-hub\n    ports:\n      - "4442:4442"\n      - "4443:4443"\n      - "4444:4444"\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"step-2---execute-yaml-file",children:["Step 2 - Execute ",(0,t.jsx)(n.code,{children:"yaml"})," file"]}),"\n",(0,t.jsxs)(n.p,{children:["Next, we'll initiate the containers with command ",(0,t.jsx)(n.code,{children:"docker-compose -f selenium-grid.yml up -d"}),", it is used to start the services defined in the Docker Compose configuration file named ",(0,t.jsx)(n.code,{children:"selenium-grid.yml"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Let's break down the components of this command:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"docker-compose"}),": This is the Docker Compose command-line tool used to manage multi-container Docker applications. It allows you to define and run multi-container Docker applications using YAML files."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"-f selenium-grid.yml"}),": This option specifies the path to the Docker Compose file that should be used. In this case, it's ",(0,t.jsx)(n.code,{children:"selenium-grid.yml"}),". Using the ",(0,t.jsx)(n.code,{children:"-f"})," flag allows you to specify a custom file name or path for the Docker Compose configuration file. If this flag is not used, Docker Compose looks for a file named ",(0,t.jsx)(n.code,{children:"docker-compose.yml"})," by default."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"up"}),": This is a Docker Compose sub-command that is used to create and start the services defined in the Docker Compose file. It builds, (re)creates, starts, and attaches to containers for a service."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"-d"}),": This option is used to start the services in detached mode. When Docker Compose runs in detached mode, it starts the services in the background, and you can continue to use the terminal for other commands without being attached to the containers' output."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["So, when you run ",(0,t.jsx)(n.code,{children:"docker-compose -f selenium-grid.yml up -d"}),", Docker Compose reads the ",(0,t.jsx)(n.code,{children:"selenium-grid.yml"})," file, creates and starts the containers defined in that file, and runs them in the background. This command is typically used to start the Docker containers defined in the Docker Compose file as a background process."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker-compose -f selenium-grid.yml up -d\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To check the status of containers use command ",(0,t.jsx)(n.code,{children:"docker compose ps"}),", it will list all running containers, providing information such as container ID, image used, status, and more, in our case, there should be 4 container service up and running."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker compose ps\n"})}),"\n",(0,t.jsx)("img",{src:i(12480).A,alt:"docker-compose"}),"\n",(0,t.jsx)(n.p,{children:"Once you navigate to the URL of the host where Selenium Grid is running, you should be able to access a dashboard displaying one node for each browser, indicating they are up and running."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"http://<selenium-grid-host-ipaddress>:4444\n"})}),"\n",(0,t.jsx)("img",{src:i(24858).A,alt:"grid"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"step-3---execute-automation-script",children:"Step 3 - Execute Automation Script"}),"\n",(0,t.jsxs)(n.p,{children:["Here, we assume that the automation project is already set up. If not, you can download the source code from ",(0,t.jsx)(n.a,{href:"https://github.com/harryvn/automation-framework",children:"GitHub"})," or refer to this ",(0,t.jsx)(n.a,{href:"/blog/selenium-framework-javascript",children:"article"})," if you prefer to set up the project from scratch."]}),"\n",(0,t.jsx)(n.p,{children:"Let's update the host details in the default.json file located under e2e/config. In this step, we'll replace localhost with the \"hostname\" or IP address of the system where the Docker engine is installed."}),"\n",(0,t.jsxs)(n.p,{children:["Let's update the host details in the default.json file located under ",(0,t.jsx)(n.code,{children:"e2e/config"}),". In this step, we'll replace ",(0,t.jsx)(n.code,{children:"localhost"})," with the ",(0,t.jsx)(n.code,{children:"hostname"})," or ",(0,t.jsx)(n.code,{children:"IP address"})," of the system where the Docker engine is installed."]}),"\n",(0,t.jsx)(n.admonition,{title:"By default, the script will execute on Chrome browser as configured in the file. However, you have the flexibility to change it to your preferred browser, such as Firefox or Edge.",type:"note"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "url": "https://the-internet.herokuapp.com/login",\n  "username": "tomsmith",\n  "password": "SuperSecretPassword!",\n  "browser": "chrome",\n  "protocol": "http",\n  "host": "<hostname> or <ipaddress>",\n  "port": 4444\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Now, we simply execute the following command, which will automatically initiate the scripts to run on the remote Docker containers instead of the local system."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm test\n"})}),"\n",(0,t.jsx)("img",{src:i(30821).A,alt:"run-test"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"live-preview",children:"Live Preview"}),"\n",(0,t.jsx)(n.p,{children:"Thus far, our progress has been smooth; we've successfully executed the automation scripts on Docker containers."}),"\n",(0,t.jsx)(n.p,{children:"Next, we will explore to watch the automation execution in realtime inside Selenium Grid."}),"\n",(0,t.jsxs)(n.p,{children:["The selenium images are integrated with ",(0,t.jsx)(n.code,{children:"noVNC"}),", enabling users to visually inspect container activity via their browser. This feature proves useful if you're unable to install a VNC client on your machine."]}),"\n",(0,t.jsxs)(n.p,{children:["After initiating the automation execution, return to the Selenium Grid interface. Under the ",(0,t.jsx)(n.code,{children:"sessions"})," section, you will observe a container running. Click on the video icon associated with the container, and it will launch ",(0,t.jsx)(n.code,{children:"noVNC"}),", providing a live preview of the ongoing automation execution."]}),"\n",(0,t.jsx)("img",{src:i(82034).A,alt:"live-preview"}),"\n",(0,t.jsx)(n.admonition,{title:"a popup will appear requesting password. The default password is 'secret'.",type:"note"}),"\n",(0,t.jsx)("img",{src:i(6896).A,alt:"preview"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"In summary, this article has demonstrated the efficient use of Docker containers for running automation scripts. We established a Selenium Grid environment with multiple browser nodes connected to a central hub, enabling distributed testing."}),"\n",(0,t.jsx)(n.p,{children:"The step-by-step implementation covered Docker setup, script execution, and live preview integration using noVNC. By following these procedures, users can streamline automation testing processes, enhancing efficiency and reliability in software development workflows."}),"\n",(0,t.jsxs)(n.p,{children:["The source code is available at ",(0,t.jsx)(n.a,{href:"https://github.com/harryvn/automation-framework",children:"GitHub"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["If you find this article useful or have any suggestions, reach out to me on ",(0,t.jsx)(n.a,{href:"https://www.linkedin.com/in/harryvn/",children:"LinkedIn"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Thank you and keep learning!"}),"\n",(0,t.jsx)(n.hr,{})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},19365:(e,n,i)=>{i.d(n,{A:()=>o});i(96540);var s=i(34164);const t={tabItem:"tabItem_Ymn6"};var r=i(74848);function o({children:e,hidden:n,className:i}){return(0,r.jsx)("div",{role:"tabpanel",className:(0,s.A)(t.tabItem,i),hidden:n,children:e})}},24858:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/grid-2d3cf656e6b49b833a7a4ccd68a568cb.png"},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var s=i(96540);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}},30821:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/run-test-d9e343221ac3883cd62af89c8ef37816.avif"},82034:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/live-preview-981a7c55b9cabf7af7d91378f2c3b72b.avif"},89374:e=>{e.exports=JSON.parse('{"permalink":"/automatiq/blog/docker","source":"@site/blog/automation/selenium/javascript/2024-03-02-docker.md","title":"Part 3 - Docker Implementation","description":"Docker Implementation","date":"2022-12-15T00:00:00.000Z","tags":[{"inline":false,"label":"Selenium","permalink":"/automatiq/blog/tags/selenium","description":"Selenium tag description"},{"inline":false,"label":"JavaScript","permalink":"/automatiq/blog/tags/javascript","description":"JavaScript tag description"},{"inline":false,"label":"PM2","permalink":"/automatiq/blog/tags/pm2","description":"PM2 tag description"},{"inline":false,"label":"Docker","permalink":"/automatiq/blog/tags/docker","description":"Docker tag description"}],"readingTime":7.38,"hasTruncateMarker":true,"authors":[{"name":"Hari Nair","title":"Test Architect","url":"https://github.com/harryvn","page":{"permalink":"/automatiq/blog/authors/harryvn"},"socials":{"github":"https://github.com/harryvn","linkedin":"https://www.linkedin.com/in/harryvn/"},"imageURL":"https://github.com/harryvn.png","key":"harryvn"}],"frontMatter":{"slug":"docker","title":"Part 3 - Docker Implementation","authors":["harryvn"],"tags":["selenium","javascript","pm2","docker"],"date":"2022-12-15T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Part 1 - Selenium Automation Framework in Java","permalink":"/automatiq/blog/selenium-framework-java"},"nextItem":{"title":"Part 2 - PM2 Implementation","permalink":"/automatiq/blog/pm2"}}')}}]);